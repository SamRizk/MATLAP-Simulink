
Alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  0000018a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080010a  0080010a  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b5  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000753  00000000  00000000  00000d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ef  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004c  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001dfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 30       	cpi	r26, 0x0A	; 10
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa e0       	ldi	r26, 0x0A	; 10
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 31       	cpi	r26, 0x13	; 19
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  8a:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vidAlarmInit>:



void vidAlarmInit(void)
{
	DDRA = 0b00000011;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret

00000098 <vidAlarmOn>:
}


void vidAlarmOn(void)
{
	if( GET_BIT(PINA,2) == 1 )
  98:	ca 9b       	sbis	0x19, 2	; 25
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <vidAlarmOn+0x10>
	{
		SET_BIT(PORTA,1);
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT(PORTA,0);
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	8b bb       	out	0x1b, r24	; 27
	}
	
	if( GET_BIT(PINA,2) == 0 )
  a8:	ca 99       	sbic	0x19, 2	; 25
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <vidAlarmOn+0x20>
	{
	    SET_BIT(PORTA,0);	
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT(PORTA,1);
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret

000000ba <rt_OneStep>:
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
  ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  be:	88 23       	and	r24, r24
  c0:	49 f0       	breq	.+18     	; 0xd4 <rt_OneStep+0x1a>
    rtmSetErrorStatus(MBD_Alarm_SF_M, "Overrun");
  c2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <MBD_Alarm_SF_M>
  c6:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <MBD_Alarm_SF_M+0x1>
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	91 83       	std	Z+1, r25	; 0x01
  d0:	80 83       	st	Z, r24
    return;
  d2:	08 95       	ret
  }

  OverrunFlag = true;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model */
  MBD_Alarm_SF_step();
  da:	0e 94 88 00 	call	0x110	; 0x110 <MBD_Alarm_SF_step>

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;
  de:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
  e2:	08 95       	ret

000000e4 <main>:
  /* Unused arguments */
  (void)(argc);
  (void)(argv);

  /* Initialize model */
  MBD_Alarm_SF_initialize();
  e4:	0e 94 8d 00 	call	0x11a	; 0x11a <MBD_Alarm_SF_initialize>
   * period 0.2 seconds (the model's base sample time) here.  The
   * call syntax for rt_OneStep is
   *
   *  rt_OneStep();
   */
  printf("Warning: The simulation will run forever. "
  e8:	88 e6       	ldi	r24, 0x68	; 104
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 93 00 	call	0x126	; 0x126 <puts>
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x12>
  //vidAlarmInit();
  
  while (rtmGetErrorStatus(MBD_Alarm_SF_M) == (NULL)) 
  {
        /*  Perform other application tasks here */
	       rt_OneStep();
  f2:	0e 94 5d 00 	call	0xba	; 0xba <rt_OneStep>
         "Generated ERT main won't simulate model step behavior. "
         "To change this behavior select the 'MAT-file logging' option.\n");
  fflush((NULL));
  //vidAlarmInit();
  
  while (rtmGetErrorStatus(MBD_Alarm_SF_M) == (NULL)) 
  f6:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <MBD_Alarm_SF_M>
  fa:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <MBD_Alarm_SF_M+0x1>
  fe:	80 81       	ld	r24, Z
 100:	91 81       	ldd	r25, Z+1	; 0x01
 102:	89 2b       	or	r24, r25
 104:	b1 f3       	breq	.-20     	; 0xf2 <main+0xe>
  }

  /* Disable rt_OneStep() here */

  /* Terminate model */
  MBD_Alarm_SF_terminate();
 106:	0e 94 92 00 	call	0x124	; 0x124 <MBD_Alarm_SF_terminate>
  return 0;
}
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret

00000110 <MBD_Alarm_SF_step>:

/* Model step function */
void MBD_Alarm_SF_step(void)
{
  /* Chart: '<Root>/Alarm_System' */
  vidAlarmInit();
 110:	0e 94 49 00 	call	0x92	; 0x92 <vidAlarmInit>
  vidAlarmOn();
 114:	0e 94 4c 00 	call	0x98	; 0x98 <vidAlarmOn>
 118:	08 95       	ret

0000011a <MBD_Alarm_SF_initialize>:
void MBD_Alarm_SF_initialize(void)
{
  /* Registration code */

  /* initialize error status */
  rtmSetErrorStatus(MBD_Alarm_SF_M, (NULL));
 11a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <MBD_Alarm_SF_M_+0x1>
 11e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <MBD_Alarm_SF_M_>
 122:	08 95       	ret

00000124 <MBD_Alarm_SF_terminate>:
}

/* Model terminate function */
void MBD_Alarm_SF_terminate(void)
{
 124:	08 95       	ret

00000126 <puts>:
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <__iob+0x2>
 132:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <__iob+0x3>
 136:	23 81       	ldd	r18, Z+3	; 0x03
 138:	21 ff       	sbrs	r18, 1
 13a:	1b c0       	rjmp	.+54     	; 0x172 <puts+0x4c>
 13c:	8c 01       	movw	r16, r24
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	f8 01       	movw	r30, r16
 144:	81 91       	ld	r24, Z+
 146:	8f 01       	movw	r16, r30
 148:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <__iob+0x2>
 14c:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <__iob+0x3>
 150:	db 01       	movw	r26, r22
 152:	18 96       	adiw	r26, 0x08	; 8
 154:	ed 91       	ld	r30, X+
 156:	fc 91       	ld	r31, X
 158:	19 97       	sbiw	r26, 0x09	; 9
 15a:	88 23       	and	r24, r24
 15c:	31 f0       	breq	.+12     	; 0x16a <puts+0x44>
 15e:	09 95       	icall
 160:	89 2b       	or	r24, r25
 162:	79 f3       	breq	.-34     	; 0x142 <puts+0x1c>
 164:	df ef       	ldi	r29, 0xFF	; 255
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	ec cf       	rjmp	.-40     	; 0x142 <puts+0x1c>
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	09 95       	icall
 16e:	89 2b       	or	r24, r25
 170:	19 f0       	breq	.+6      	; 0x178 <puts+0x52>
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	9f ef       	ldi	r25, 0xFF	; 255
 176:	02 c0       	rjmp	.+4      	; 0x17c <puts+0x56>
 178:	8d 2f       	mov	r24, r29
 17a:	9c 2f       	mov	r25, r28
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
